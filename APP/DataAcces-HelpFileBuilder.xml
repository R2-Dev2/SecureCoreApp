<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataAccess</name>
    </assembly>
    <members>
        <member name="T:DataAccess.AccesADades">
            <summary>
            This class contains all the functions used by the program to perform queries and execute them against the DB.
            </summary>
        </member>
        <member name="M:DataAccess.AccesADades.#ctor(System.String)">
            <summary>
            This function establishes a connection to the DB.
            </summary>
            <param name="connectionString">Connection info is required</param>
        </member>
        <member name="M:DataAccess.AccesADades.Connectar">
            <summary>
            This function gets the information for the connection and creates a new connection.
            </summary>
        </member>
        <member name="M:DataAccess.AccesADades.GetStringConnectionBuilder">
            <summary>
            This function returns StringConnectionStringBuilder to use in Crystal Reports 
            </summary>
            <returns>StringConnectionStringBuilder with connection information</returns>
        </member>
        <member name="M:DataAccess.AccesADades.PortarTaula(System.String)">
            <summary>
            This function returns all data contained in a table
            </summary>
            <param name="nomTaula">Name of the table to be consulted</param>
            <returns>DataSet with table contents</returns>
        </member>
        <member name="M:DataAccess.AccesADades.PortarPerConsulta(System.String)">
            <summary>
            This function will return the information resulting from executing the given query
            </summary>
            <param name="query">SQL Query in plain text</param>
            <returns>DataSet with the resulting data</returns>
        </member>
        <member name="M:DataAccess.AccesADades.PortarPerConsulta(System.String,System.String)">
            <summary>
            This function overloads PortarPerConsulta(string query) in order to add the name that the returned DataTable will have
            </summary>
            <param name="query">SQL Query in plain text</param>
            <param name="nomTaula">Name that the returned table will have</param>
            <returns>DataSet with the DataTable</returns>
        </member>
        <member name="M:DataAccess.AccesADades.Actualitzar(System.String,System.Data.DataSet)">
            <summary>
            This function updates the database with the modified DataSet. 
            </summary>
            <param name="query">Original DataSet SQL query in plain Text</param>
            <param name="dts">DataSet with changes</param>
            <returns>Number of rows affected or -1 if exception ocurred</returns>
        </member>
        <member name="M:DataAccess.AccesADades.Executa(System.String)">
            <summary>
            This function executes the query received as parameter
            </summary>
            <param name="query">SQL Query in plain text</param>
        </member>
        <member name="M:DataAccess.AccesADades.GeneraConsultaCerca(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This function generates a SqlCommand query that returns all values from the table matching the parameters
            </summary>
            <param name="tableName">Name of the table to be queried</param>
            <param name="values">Parameters to be checked in the query</param>
            <returns>Structured SQL query</returns>
        </member>
        <member name="M:DataAccess.AccesADades.GeneraConsultaCercaQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This function generates a SqlCommand adding parameters to a given query in plain text
            </summary>
            <param name="query">Main query in plain text. Must contain at least one condition (i.e. WHERE 1 = 1)</param>
            <param name="values">Parameters to be checked in the query</param>
            <returns>Structured SQL query</returns>
        </member>
        <member name="M:DataAccess.AccesADades.GeneraConsultaStoredProcedure(System.String)">
            <summary>
            This function will return a sql query using the name of a procedure stored in the database.
            </summary>
            <param name="procedure">Name of the procedure stored in the DB</param>
            <returns>Structured SQL query</returns>
        </member>
        <member name="M:DataAccess.AccesADades.ExecutaCerca(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This function uses the function of GeneraConsultaConsultaCerca() to perform a query with the given parameters
            </summary>
            <param name="tableName">Name of the table to be consulted</param>
            <param name="values">Values to be contained in the query</param>
            <returns>DataSet with the resulting data</returns>
        </member>
        <member name="M:DataAccess.AccesADades.ExecutaCercaQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This function uses the function of GeneraConsultaConsultaCercaQuery() to perform a query with the given parameters
            </summary>
            <param name="query">Main query in plain Text</param>
            <param name="values">Values to be contained in the query</param>
            <returns>DataSet with the resulting data</returns>
        </member>
        <member name="M:DataAccess.AccesADades.ExecutaStoredProcedure(System.String)">
            <summary>
            This function executes a procedure that is stored in the database.
            </summary>
            <param name="procedure">Name of the procedure stored in the DB</param>
        </member>
        <member name="M:DataAccess.AccesADades.ExecutaTransaccioNonQuery(System.Data.SqlClient.SqlCommand)">
            <summary>
            This function executes a SQL Query and returns the number of rows affected.
            </summary>
            <param name="command">Structured SQL Query</param>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:DataAccess.AccesADades.ExecutaTransaccioEscalar(System.Data.SqlClient.SqlCommand)">
            <summary>
            This function executes a SQL Query that returns a number (Example: Count).
            </summary>
            <param name="command">Structured SQL Query</param>
            <returns>Transaction result </returns>
        </member>
    </members>
</doc>
